from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context
from logging.config import fileConfig
from alembic import context
from sqlalchemy import engine_from_config, pool

import os
import sys
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]   # project root
SRC = ROOT / "src"
if SRC.exists():
    sys.path.insert(0, str(SRC))

# load .env if present
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

config = context.config
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Import your metadata for autogenerate:
# Adjust this import to wherever your Base lives
# Example if you defined Base in app/core/db.py:
from app.core.db import Base  # <- change to your path
target_metadata = Base.metadata

# --- guardrail: BLOCK autogenerated table DROPs ---
def include_object(obj, name, type_, reflected, compare_to):
    # If a table exists in DB but not in metadata, autogenerate would propose a DROP.
    # Returning False here prevents that; you'll write explicit drops when you really intend them.
    if type_ == "table" and compare_to is None:
        return False
    return True

# Read DB URL from env
db_url = os.getenv("DATABASE_URL")
if not db_url:
    raise RuntimeError("DATABASE_URL is not set (check your environment or .env)")

# Inject the URL into the config so engine_from_config picks it up
config.set_main_option("sqlalchemy.url", db_url)

def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    context.configure(
        url=context.config.get_main_option("sqlalchemy.url"),
        target_metadata=target_metadata,
        literal_binds=True,
        compare_type=True,
        compare_server_default=True,
        include_object=include_object,
    )
    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    connectable = engine_from_config(
        context.config.get_section(context.config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
        future=True,
    )
    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
            include_object=include_object,
        )
        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
